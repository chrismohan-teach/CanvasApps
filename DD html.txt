<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Derivative Defender</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            overflow: hidden;
            background-color: #000;
            color: #fff;
        }

        #game-container {
            font-family: 'Orbitron', sans-serif;
            background: #000 url('https://www.transparenttextures.com/patterns/stardust.png');
            animation: scroll-background 60s linear infinite;
        }

        @keyframes scroll-background {
            from { background-position: 0 0; }
            to { background-position: 0 1000px; }
        }

        .asteroid {
            position: absolute;
            background-color: #8B4513; /* SaddleBrown */
            color: white;
            padding: 10px 15px;
            border-radius: 50%;
            border: 2px solid #A0522D; /* Sienna */
            box-shadow: 0 0 15px rgba(255, 165, 0, 0.5);
            transform: rotate(0deg);
            animation: spin 10s linear infinite;
            transition: top 1s linear;
            font-size: 1rem;
            white-space: nowrap;
        }
        
        .asteroid.exotic {
            background-color: #4B0082; /* Indigo */
            border-color: #8A2BE2; /* BlueViolet */
            box-shadow: 0 0 20px #DA70D6; /* Orchid */
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .laser-dot {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: #00FF00;
            border-radius: 50%;
            box-shadow: 0 0 15px #00FF00, 0 0 25px #fff;
            transition: top 0.3s ease-out, left 0.3s ease-out;
        }

        .explosion {
            position: absolute;
            width: 100px;
            height: 100px;
            background-image: radial-gradient(circle, rgba(255,255,0,1) 0%, rgba(255,165,0,1) 40%, rgba(255,0,0,0) 70%);
            border-radius: 50%;
            transform: scale(0);
            animation: boom 0.4s ease-out forwards;
        }

        @keyframes boom {
            from { transform: scale(0); opacity: 1; }
            to { transform: scale(1.5); opacity: 0; }
        }
        
        @keyframes screen-shake {
            0%, 100% { transform: translateX(0); }
            20%, 60% { transform: translateX(-5px); }
            40%, 80% { transform: translateX(5px); }
        }

        .shake {
            animation: screen-shake 0.3s ease-in-out;
        }
        
        #station-dome {
            width: 200px;
            height: 100px;
            background: radial-gradient(circle at 50% 100%, #4a5568, #1a202c);
            border-top-left-radius: 100px;
            border-top-right-radius: 100px;
            border-top: 4px solid #718096;
            box-shadow: inset 0 10px 20px rgba(0,0,0,0.5);
        }

        .input-field {
            background-color: #1a202c;
            color: #00ff00;
            border: 1px solid #4a5568;
            caret-color: #00ff00;
            text-align: center;
            border-radius: 0.375rem;
            padding: 0.5rem;
        }
        .input-field:focus {
            outline: none;
            box-shadow: 0 0 0 2px #fbbf24;
        }
    </style>
</head>
<body class="bg-black flex items-center justify-center h-screen">

    <div id="game-container" class="relative w-full max-w-4xl h-full bg-gray-900 overflow-hidden shadow-2xl border-2 border-gray-600">
        <!-- Game Screen -->
        <div id="game-screen" class="relative w-full h-full">
            <!-- Station -->
            <div class="absolute bottom-0 left-1/2 -translate-x-1/2" id="station">
                <div id="station-dome"></div>
            </div>
        </div>

        <!-- UI Panel -->
        <div id="ui-panel" class="absolute top-0 left-0 w-full p-4 flex justify-between text-lg bg-black bg-opacity-50 z-10">
            <div>Score: <span id="score">0</span></div>
            <div>Wave: <span id="wave">1</span></div>
            <div>Shields: <span id="shields" class="text-green-400">100%</span></div>
        </div>

        <!-- Targeting Console -->
        <div id="targeting-console" class="absolute bottom-0 left-0 w-full p-4 bg-gray-800 border-t-2 border-gray-600 z-20">
            <div class="text-center mb-2">
                <p class="text-gray-400 text-sm">Trajectory Signature:</p>
                <p id="function-display" class="text-2xl text-yellow-300 h-8">---</p>
            </div>
            <div class="flex items-center justify-center gap-4">
                <div id="input-wrapper" class="flex items-center justify-center gap-1 text-2xl">
                    <input type="text" id="coeff-input" class="input-field w-24" disabled>
                    <span id="x-variable" class="hidden text-green-400 mx-1">x</span>
                    <sup id="power-symbol" class="hidden text-green-400 text-lg -top-2 relative">
                        <input type="text" id="exp-input" class="input-field w-16">
                    </sup>
                </div>
                <button id="fire-button" class="px-8 py-2 text-xl bg-red-600 hover:bg-red-700 rounded-md disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors">FIRE!</button>
            </div>
        </div>

        <!-- Modal -->
        <div id="modal" class="absolute inset-0 bg-black bg-opacity-75 flex items-center justify-center z-30">
            <div class="bg-gray-800 border-2 border-blue-400 rounded-lg p-8 text-center max-w-lg shadow-lg">
                <h2 id="modal-title" class="text-3xl mb-4 text-cyan-300">Derivative Defender</h2>
                <p id="modal-text" class="mb-6 text-lg">The station is under attack by an asteroid storm! Use your calculus skills to calibrate the laser cannon and defend The Vertex. Type the derivative of each asteroid's function to destroy it.</p>
                <button id="modal-button" class="px-10 py-3 text-2xl bg-blue-600 hover:bg-blue-700 rounded-md transition-colors">Start Mission</button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const gameContainer = document.getElementById('game-container');
        const gameScreen = document.getElementById('game-screen');
        const scoreEl = document.getElementById('score');
        const waveEl = document.getElementById('wave');
        const shieldsEl = document.getElementById('shields');
        const functionDisplay = document.getElementById('function-display');
        const coeffInput = document.getElementById('coeff-input');
        const xVariable = document.getElementById('x-variable');
        const powerSymbol = document.getElementById('power-symbol');
        const expInput = document.getElementById('exp-input');
        const fireButton = document.getElementById('fire-button');
        const modal = document.getElementById('modal');
        const modalTitle = document.getElementById('modal-title');
        const modalText = document.getElementById('modal-text');
        const modalButton = document.getElementById('modal-button');

        // Game State
        let score = 0;
        let shields = 100;
        let currentWave = 0;
        let gameActive = false;
        let currentAsteroid = null;
        let gameLoopInterval = null;

        // Question Data with structured answers
        const waves = [
            // Wave 1: Standard Trajectories
            [
                { func: 'y = x³', displayDeriv: '3x²', answer: { type: 'power', coeff: '3', exp: '2' } },
                { func: 'f(x) = 5x²', displayDeriv: '10x', answer: { type: 'power', coeff: '10', exp: '1' } },
                { func: 'y = 2x⁴', displayDeriv: '8x³', answer: { type: 'power', coeff: '8', exp: '3' } },
                { func: 'f(x) = x⁵', displayDeriv: '5x⁴', answer: { type: 'power', coeff: '5', exp: '4' } },
                { func: 'y = 6x', displayDeriv: '6', answer: { type: 'constant', coeff: '6' } },
            ],
            // Wave 2: Unusual Orbits
            [
                { func: 'f(x) = 15', displayDeriv: '0', answer: { type: 'constant', coeff: '0' } },
                { func: 'y = -4x', displayDeriv: '-4', answer: { type: 'constant', coeff: '-4' } },
                { func: 'f(x) = x', displayDeriv: '1', answer: { type: 'constant', coeff: '1' } },
                { func: 'y = -100', displayDeriv: '0', answer: { type: 'constant', coeff: '0' } },
                { func: 'f(x) = 9x²', displayDeriv: '18x', answer: { type: 'power', coeff: '18', exp: '1' } },
            ],
            // Wave 3: Exotic Matter
            [
                { func: 'y = x⁻²', displayDeriv: '-2x⁻³', answer: { type: 'power', coeff: '-2', exp: '-3' }, isExotic: true },
                { func: 'f(x) = √x', displayDeriv: '0.5x⁻⁰.⁵', answer: { type: 'power', coeff: '0.5', exp: '-0.5' }, isExotic: true },
                { func: 'y = 3x⁻¹', displayDeriv: '-3x⁻²', answer: { type: 'power', coeff: '-3', exp: '-2' }, isExotic: true },
                { func: 'f(x) = x¹/²', displayDeriv: '0.5x⁻⁰.⁵', answer: { type: 'power', coeff: '0.5', exp: '-0.5' }, isExotic: true },
                { func: 'y = -2x⁻⁴', displayDeriv: '8x⁻⁵', answer: { type: 'power', coeff: '8', exp: '-5' }, isExotic: true },
            ]
        ];
        let waveQuestions = [];

        // --- Game Logic ---

        function init() {
            modalButton.onclick = startGame;
            fireButton.onclick = handleFire;
            coeffInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') handleFire(); });
            expInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') handleFire(); });
            showModal('Derivative Defender', 'The station is under attack! Use your calculus skills to calibrate the laser cannon and defend The Vertex.', 'Start Mission', startGame);
        }

        function startGame() {
            score = 0;
            shields = 100;
            currentWave = 0;
            updateUI();
            startNextWave();
        }
        
        function startNextWave() {
            if (currentWave >= waves.length) {
                endGame(true); // Player won
                return;
            }
            
            waveQuestions = [...waves[currentWave]];
            currentWave++;
            gameActive = true;
            
            showModal(
                `Wave ${currentWave} Incoming!`, 
                `Prepare for the next wave of asteroids. Good luck, Cadet!`, 
                'Engage!', 
                () => {
                    modal.classList.add('hidden');
                    spawnAsteroid();
                    if(gameLoopInterval) clearInterval(gameLoopInterval);
                    gameLoopInterval = setInterval(gameLoop, 50);
                }
            );
            updateUI();
        }

        function setupInputFields(type) {
            coeffInput.value = '';
            expInput.value = '';
            coeffInput.disabled = false;
            fireButton.disabled = false;

            if (type === 'power') {
                xVariable.classList.remove('hidden');
                powerSymbol.classList.remove('hidden');
                expInput.disabled = false;
                coeffInput.focus();
            } else { // constant
                xVariable.classList.add('hidden');
                powerSymbol.classList.add('hidden');
                expInput.disabled = true;
                coeffInput.focus();
            }
        }

        function spawnAsteroid() {
            if (!gameActive) return;

            if (currentAsteroid && currentAsteroid.element) {
                currentAsteroid.element.remove();
            }

            if (waveQuestions.length === 0) {
                currentAsteroid = null;
                functionDisplay.textContent = '---';
                coeffInput.disabled = true;
                expInput.disabled = true;
                fireButton.disabled = true;
                setTimeout(startNextWave, 2000);
                return;
            }

            const question = waveQuestions.shift();
            const asteroidEl = document.createElement('div');
            asteroidEl.className = 'asteroid';
            if (question.isExotic) asteroidEl.classList.add('exotic');
            asteroidEl.textContent = question.func;
            
            const gameScreenWidth = gameScreen.offsetWidth;
            const asteroidWidth = 150;
            const randomX = Math.random() * (gameScreenWidth - asteroidWidth);

            asteroidEl.style.left = `${randomX}px`;
            asteroidEl.style.top = '-50px';
            gameScreen.appendChild(asteroidEl);

            currentAsteroid = {
                ...question,
                element: asteroidEl,
                y: -50
            };

            functionDisplay.innerHTML = currentAsteroid.func.replace(/⁻/g, '<sup>-').replace(/¹\/²/g, '<sup>1/2</sup>').replace('³','<sup>3</sup>').replace('²','<sup>2</sup>').replace('⁴','<sup>4</sup>').replace('⁵','<sup>5</sup>');
            setupInputFields(currentAsteroid.answer.type);
        }

        function gameLoop() {
            if (!gameActive || !currentAsteroid) return;

            const speed = 1 + (currentWave * 1.5);
            currentAsteroid.y += speed;
            currentAsteroid.element.style.top = `${currentAsteroid.y}px`;

            if (currentAsteroid.y > gameScreen.offsetHeight - 100) {
                handleShieldHit();
            }
        }
        
        function handleShieldHit() {
            shields -= 20;
            gameContainer.classList.add('shake');
            setTimeout(() => gameContainer.classList.remove('shake'), 300);
            
            showCorrection();

            if (shields <= 0) {
                shields = 0;
                endGame(false);
            }
            updateUI();
        }

        function handleFire() {
            if (!gameActive || !currentAsteroid || fireButton.disabled) return;

            const answer = currentAsteroid.answer;
            let isCorrect = false;

            const userCoeff = coeffInput.value.trim();
            
            if (answer.type === 'power') {
                const userExp = expInput.value.trim();
                // Handle implied coefficient of 1
                const coeffCheck = (userCoeff === answer.coeff) || (answer.coeff === '1' && userCoeff === '');
                const expCheck = (userExp === answer.exp) || (answer.exp === '1' && userExp === '');
                isCorrect = coeffCheck && expCheck;
            } else { // constant
                isCorrect = (userCoeff === answer.coeff);
            }

            if (isCorrect) {
                score += 100;
                shootLaser();
                setTimeout(() => {
                    explodeAsteroid(currentAsteroid.element);
                    spawnAsteroid();
                }, 300);
            } else {
                coeffInput.classList.add('bg-red-800');
                expInput.classList.add('bg-red-800');
                setTimeout(() => {
                    coeffInput.classList.remove('bg-red-800');
                    expInput.classList.remove('bg-red-800');
                }, 500);
            }
            updateUI();
        }
        
        function showCorrection() {
             const explanation = `The correct derivative for <strong>${currentAsteroid.func}</strong> is <strong>${currentAsteroid.displayDeriv.replace(/⁻/g, '<sup>-</sup>')}</strong>. The asteroid got past our defenses!`;
            
            showModal(
                "Correction Required",
                explanation,
                "Continue",
                () => {
                    modal.classList.add('hidden');
                    if (gameActive) {
                        spawnAsteroid();
                    }
                }
            );
        }

        function shootLaser() {
            const laserDot = document.createElement('div');
            laserDot.className = 'laser-dot';
            
            const stationRect = document.getElementById('station-dome').getBoundingClientRect();
            const containerRect = gameContainer.getBoundingClientRect();
            
            const startX = stationRect.left + stationRect.width / 2 - containerRect.left;
            const startY = stationRect.top - containerRect.top;
            
            laserDot.style.left = `${startX - 5}px`;
            laserDot.style.top = `${startY}px`;
            gameScreen.appendChild(laserDot);
            
            // Force reflow to apply start position before transition
            laserDot.offsetHeight; 

            const asteroidRect = currentAsteroid.element.getBoundingClientRect();
            const endX = asteroidRect.left + asteroidRect.width / 2 - containerRect.left;
            const endY = asteroidRect.top + asteroidRect.height / 2 - containerRect.top;

            laserDot.style.left = `${endX - 5}px`;
            laserDot.style.top = `${endY - 5}px`;

            setTimeout(() => laserDot.remove(), 300);
        }

        function explodeAsteroid(asteroidElement) {
            const explosion = document.createElement('div');
            explosion.className = 'explosion';
            const asteroidRect = asteroidElement.getBoundingClientRect();
            const containerRect = gameContainer.getBoundingClientRect();

            explosion.style.left = `${asteroidRect.left - containerRect.left - asteroidRect.width/2}px`;
            explosion.style.top = `${asteroidRect.top - containerRect.top - asteroidRect.height/2}px`;
            
            gameScreen.appendChild(explosion);
            setTimeout(() => explosion.remove(), 400);
        }

        function endGame(isWin) {
            gameActive = false;
            clearInterval(gameLoopInterval);
            gameLoopInterval = null;
            
            document.querySelectorAll('.asteroid').forEach(el => el.remove());
            currentAsteroid = null;

            const title = isWin ? "Mission Complete!" : "Game Over";
            const text = isWin 
                ? `Congratulations, Cadet! You defended The Vertex. Your final score is ${score}.`
                : `The station's shields have failed! Your final score is ${score}. Time for a debriefing.`;
            
            showModal(title, text, 'Play Again', init);
        }

        function updateUI() {
            scoreEl.textContent = score;
            waveEl.textContent = currentWave;
            shieldsEl.textContent = `${shields}%`;
            
            if (shields > 60) shieldsEl.className = 'text-green-400';
            else if (shields > 30) shieldsEl.className = 'text-yellow-400';
            else shieldsEl.className = 'text-red-500';
        }

        function showModal(title, text, buttonText, onButtonClick) {
            modalTitle.textContent = title;
            modalText.innerHTML = text;
            modalButton.textContent = buttonText;
            modalButton.onclick = onButtonClick;
            modal.classList.remove('hidden');
            coeffInput.disabled = true;
            expInput.disabled = true;
            fireButton.disabled = true;
        }

        // Initial call
        init();
    </script>
</body>
</html>
